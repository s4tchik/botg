# -*- coding: utf-8 -*-
import logging
import requests
import sqlite3
import time 
from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = ''
HUGGINGFACE_API_TOKEN = ''
DATABASE_FILE = 'db.db'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
con = sqlite3.connect(DATABASE_FILE)
cur = con.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cur.execute('''CREATE TABLE IF NOT EXISTS users(
    id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    question_num INTEGER DEFAULT 0
)''')
cur.execute('''CREATE TABLE IF NOT EXISTS conversations(
    id INTEGER PRIMARY KEY,
    uid INTEGER,
    question TEXT,
    create_date INT,
    answer TEXT,
    is_show BOOL DEFAULT 1
)''')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s', level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Hugging Face API
def get_huggingface_response(prompt):
    url = "https://api-inference.huggingface.co/models/gpt2"
    headers = {
        'Authorization': f'Bearer {HUGGINGFACE_API_TOKEN}'
    }
    payload = {
        "inputs": prompt
    }
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Hugging Face API: {response.text}")
        return None
    return response.json()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(CommandStart())
async def start(message: types.Message):
    user_db = cur.execute("SELECT * FROM users WHERE id = ?", (message.from_user.id,)).fetchone()
    temp = message.from_user.first_name.replace('"', '""')
    
    if user_db is None:
        cur.execute("INSERT INTO users (id, username, first_name) VALUES (?, ?, ?)", 
                    (message.from_user.id, message.from_user.username or "no_username", temp))
    elif user_db[2] != message.from_user.first_name:
        cur.execute("UPDATE users SET first_name = ? WHERE id = ?", (temp, message.from_user.id))
    elif user_db[1] != message.from_user.username:
        cur.execute("UPDATE users SET username = ? WHERE id = ?", (message.from_user.username, message.from_user.id))
    
    con.commit()

    await message.answer(
        '''<b>–ü—Ä–∏–≤–µ—Ç!</b>

        –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º OpenAI (—á–µ—Ä–µ–∑ Hugging Face API).

        ‚ö°Ô∏è–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç <b>–º–æ–¥–µ–ª—å GPT-2 –æ—Ç Hugging Face</b> –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.

        <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
        1. <i>–ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã</i>
        2. <i>–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –ª—é–±–æ–π</i>
        3. <i>–ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥</i>
        4. <i>–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã</i>

        –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.

        ‚úâÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç</b>, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å.

        üîÑ –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å <b>–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞</b> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deletecontext.''', 
        parse_mode=types.ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deletecontext
@dp.message_handler(commands=['deletecontext'])
async def deletecontext(message: types.Message):
    cur.execute("UPDATE conversations SET is_show = 0 WHERE uid = ?", (message.from_user.id,))
    con.commit()
    await message.answer('<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω.</b>', parse_mode=types.ParseMode.HTML)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(content_types=['text'])
async def handle_message(message: types.Message):
    user_db = cur.execute("SELECT * FROM users WHERE id = ?", (message.from_user.id,)).fetchone()
    temp = message.from_user.first_name.replace('"', '""')
    
    if user_db is None:
        cur.execute("INSERT INTO users (id, username, first_name) VALUES (?, ?, ?)", 
                    (message.from_user.id, message.from_user.username or "no_username", temp))
    elif user_db[2] != message.from_user.first_name:
        cur.execute("UPDATE users SET first_name = ? WHERE id = ?", (temp, message.from_user.id))
    elif user_db[1] != message.from_user.username:
        cur.execute("UPDATE users SET username = ? WHERE id = ?", (message.from_user.username, message.from_user.id))
    
    con.commit()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–æ–Ω—Ç–µ–∫—Å—Ç)
    conversation = cur.execute("SELECT * FROM conversations WHERE uid = ? AND is_show = 1", (message.from_user.id,)).fetchall()
    context = [{'role': 'user', 'content': x[2]} for x in conversation]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face
    response = get_huggingface_response(message.text)
    
    if response is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç Hugging Face: {response}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    try:
        answer = response[0]['generated_text'] if isinstance(response, list) and len(response) > 0 else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
    except KeyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Hugging Face: {e}")
        answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cur.execute("INSERT INTO conversations (uid, question, create_date, answer) VALUES (?, ?, ?, ?)", 
                (message.from_user.id, message.text, int(time.time()), answer))
    con.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(answer)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
